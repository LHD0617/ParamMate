#!/usr/bin/env python
# -*- encoding: utf-8 -*-
"""
@File    :   SerialTool.py    
@Contact :   15663678208
@Modify Time      @Author    @Version    @Desciption
------------      -------    --------    -----------
2022/8/8 12:47   LHD      1.0         None
"""

# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'SerialToolUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import re
import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QGroupBox
from PyQt5.QtSerialPort import QSerialPort, QSerialPortInfo


class UiSerialTool(QGroupBox):
    BaudList = ('9600', '14400', '19200', '57600', '115200', '256000', '460800', '2000000')
    DataBitList = ('5', '6', '7', '8')
    CheckBitStrList = ('无校验', '偶校验', '奇校验')
    CheckBitList = (QSerialPort.NoParity, QSerialPort.EvenParity, QSerialPort.OddParity)
    StopBitList = ('1', '2')

    def __init__(self):
        self.SwitchPortFlag = False
        self.PortList = []
        self.Ser = QSerialPort()
        super(UiSerialTool, self).__init__()
        self.setupUi(self)

    def setupUi(self, SerialTool):
        SerialTool.setObjectName("SerialTool")
        SerialTool.resize(200, 800)
        self.setMaximumSize(QtCore.QSize(200, 16777215))
        self.ConfigureGboxLayout = QtWidgets.QGridLayout(self)
        self.ConfigureGboxLayout.setVerticalSpacing(20)
        self.ConfigureGboxLayout.setObjectName("ConfigureGboxLayout")
        self.BaudLab = QtWidgets.QLabel()
        self.BaudLab.setObjectName("BaudLab")
        self.ConfigureGboxLayout.addWidget(self.BaudLab, 1, 0, 1, 1)
        self.DatabitLab = QtWidgets.QLabel()
        self.DatabitLab.setObjectName("DatabitLab")
        self.ConfigureGboxLayout.addWidget(self.DatabitLab, 2, 0, 1, 1)
        self.DataBitCbox = QtWidgets.QComboBox()
        self.DataBitCbox.setObjectName("DataBitCbox")
        self.ConfigureGboxLayout.addWidget(self.DataBitCbox, 2, 1, 1, 1)
        self.CheckBitCbox = QtWidgets.QComboBox()
        self.CheckBitCbox.setObjectName("CheckBitCbox")
        self.ConfigureGboxLayout.addWidget(self.CheckBitCbox, 3, 1, 1, 1)
        self.PortLab = QtWidgets.QLabel()
        self.PortLab.setObjectName("PortLab")
        self.ConfigureGboxLayout.addWidget(self.PortLab, 0, 0, 1, 1)
        self.StopBitLab = QtWidgets.QLabel()
        self.StopBitLab.setObjectName("StopBitLab")
        self.ConfigureGboxLayout.addWidget(self.StopBitLab, 4, 0, 1, 1)
        self.CheckBitLab = QtWidgets.QLabel()
        self.CheckBitLab.setObjectName("CheckBitLab")
        self.ConfigureGboxLayout.addWidget(self.CheckBitLab, 3, 0, 1, 1)
        self.PortCbox = QtWidgets.QComboBox()
        self.PortCbox.setObjectName("PortCbox")
        self.ConfigureGboxLayout.addWidget(self.PortCbox, 0, 1, 1, 1)
        self.RefreshPbtn = QtWidgets.QPushButton()
        self.RefreshPbtn.setObjectName("RefreshPbtn")
        self.ConfigureGboxLayout.addWidget(self.RefreshPbtn, 5, 0, 1, 1)
        self.PortSwitchPbtn = QtWidgets.QPushButton()
        self.PortSwitchPbtn.setObjectName("PortSwitchPbtn")
        self.ConfigureGboxLayout.addWidget(self.PortSwitchPbtn, 5, 1, 1, 1)
        self.BaudCbox = QtWidgets.QComboBox()
        self.BaudCbox.setObjectName("BaudCbox")
        self.ConfigureGboxLayout.addWidget(self.BaudCbox, 1, 1, 1, 1)
        self.StopBitCbox = QtWidgets.QComboBox()
        self.StopBitCbox.setObjectName("StopBitCbox")
        self.ConfigureGboxLayout.addWidget(self.StopBitCbox, 4, 1, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.ConfigureGboxLayout.addItem(spacerItem, 6, 0, 1, 2)

        self.retranslateUi(SerialTool)
        self.SetSignalFunction()
        QtCore.QMetaObject.connectSlotsByName(SerialTool)

    def retranslateUi(self, SerialTool):
        _translate = QtCore.QCoreApplication.translate
        SerialTool.setWindowTitle(_translate("SerialTool", "Form"))
        self.setTitle(_translate("SerialTool", "串口配置"))
        self.BaudLab.setText(_translate("SerialTool", "波特率："))
        self.DatabitLab.setText(_translate("SerialTool", "数据位："))
        self.PortLab.setText(_translate("SerialTool", "端口："))
        self.StopBitLab.setText(_translate("SerialTool", "停止位："))
        self.CheckBitLab.setText(_translate("SerialTool", "校验位："))
        self.RefreshPbtn.setText(_translate("SerialTool", "刷新串口"))
        self.PortSwitchPbtn.setText(_translate("SerialTool", "打开串口"))

        self.BaudCbox.addItems(self.BaudList)
        self.BaudCbox.setCurrentIndex(4)
        self.DataBitCbox.addItems(self.DataBitList)
        self.DataBitCbox.setCurrentIndex(3)
        self.CheckBitCbox.addItems(self.CheckBitStrList)
        self.StopBitCbox.addItems(self.StopBitList)

    def SetSignalFunction(self):
        # 按键类
        self.RefreshPbtn.clicked.connect(self.RefreshPort)
        self.PortSwitchPbtn.clicked.connect(self.SwitchPort)

        # 串口类
        # self.Ser.readyRead.connect(self.ReceiveData)

    def RefreshPort(self):
        PortList = list(QSerialPortInfo.availablePorts())
        self.PortList = []
        if len(PortList) <= 0:
            print('没有发现串口')
        else:
            print('发现%d个串口' % len(PortList))
            for Port in PortList:
                self.PortList.append(Port.portName())
        self.PortCbox.clear()
        self.PortCbox.addItems(self.PortList)

    def SwitchPort(self):
        com = self.PortCbox.currentText()
        if not self.SwitchPortFlag:
            if len(com) > 0:
                try:
                    self.Ser.setPortName(com)
                    self.Ser.setBaudRate(int(self.BaudCbox.currentText()))
                    self.Ser.setDataBits(int(self.DataBitCbox.currentText()))
                    self.Ser.setParity(self.CheckBitList[self.CheckBitList[self.CheckBitCbox.currentIndex()]])
                    self.Ser.setStopBits(int(self.StopBitCbox.currentText()))
                    self.Ser.open(QSerialPort.ReadWrite)
                except:
                    print('%s打开失败' % com)
                if self.Ser.isOpen():
                    print('%s打开成功' % com)
                    self.SwitchPortFlag = True
                    self.PortSwitchPbtn.setText('关闭串口')
                    self.RefreshPbtn.setEnabled(False)
                    self.PortCbox.setEnabled(False)
                    self.BaudCbox.setEnabled(False)
                    self.DataBitCbox.setEnabled(False)
                    self.CheckBitCbox.setEnabled(False)
                    self.StopBitCbox.setEnabled(False)
                else:
                    print('%s打开失败' % com)
            else:
                print('请选择串口')
        else:
            self.SwitchPortFlag = False
            self.PortSwitchPbtn.setText('打开串口')
            self.RefreshPbtn.setEnabled(True)
            self.PortCbox.setEnabled(True)
            self.BaudCbox.setEnabled(True)
            self.DataBitCbox.setEnabled(True)
            self.CheckBitCbox.setEnabled(True)
            self.StopBitCbox.setEnabled(True)
            self.Ser.close()
            print('%s已关闭' % com)

    def ReceiveData(self):
        print(self.Ser.readAll())


if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    ui = UiSerialTool()
    ui.show()
    sys.exit(app.exec_())
