#!/usr/bin/env python
# -*- encoding: utf-8 -*-
"""
@File    :   SerialTool.py    
@Contact :   15663678208
@Modify Time      @Author    @Version    @Desciption
------------      -------    --------    -----------
2022/8/8 12:47   LHD      1.0         None
"""

# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'SerialToolUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os
import re
import sys
import serial
import serial.tools.list_ports
from MessageClass import MessageClass
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import pyqtSignal, QTimer
from PyQt5.QtWidgets import QGroupBox


BaudList = ('9600', '19200', '38400', '57600', '115200', '460800', '500000', '576000', '921600', '1000000', '1152000',
            '1500000', '2000000', '2500000', '3000000', '3500000', '4000000')
DataBitList = ('5', '6', '7', '8')
CheckBitStrList = ('无校验', '偶校验', '奇校验')
CheckBitList = ('N', 'E', 'O')
StopBitList = ('1', '1.5', '2')

SerialToolConfigureFileName = 'SerialToolConfigure.ini'


class UiSerialTool(QGroupBox):
    RefreshPortTimer: QTimer()
    LogSignal = pyqtSignal(MessageClass)
    readyRead = pyqtSignal(bytes)

    def __init__(self):
        """
        初始化函数
        """
        self.Name = 'SerialTool'
        self.SwitchPortFlag = False
        self.PortList = []
        self.RefreshPortTimer = QTimer()
        self.ReceiveTimer = QTimer()
        self.Ser = serial.Serial()
        super(UiSerialTool, self).__init__()
        self.setupUi(self)
        self.RefreshPortTimer.start(100)

    def setupUi(self, SerialTool):
        """
        UI页面初始化
        :param SerialTool:
        :return:
        """
        SerialTool.setObjectName("SerialTool")
        SerialTool.resize(200, 800)
        self.setMaximumSize(QtCore.QSize(200, 16777215))
        self.ConfigureGboxLayout = QtWidgets.QGridLayout(self)
        self.ConfigureGboxLayout.setVerticalSpacing(20)
        self.ConfigureGboxLayout.setObjectName("ConfigureGboxLayout")
        self.BaudLab = QtWidgets.QLabel()
        self.BaudLab.setObjectName("BaudLab")
        self.ConfigureGboxLayout.addWidget(self.BaudLab, 1, 0, 1, 1)
        self.DatabitLab = QtWidgets.QLabel()
        self.DatabitLab.setObjectName("DatabitLab")
        self.ConfigureGboxLayout.addWidget(self.DatabitLab, 2, 0, 1, 1)
        self.DataBitCbox = QtWidgets.QComboBox()
        self.DataBitCbox.setObjectName("DataBitCbox")
        self.ConfigureGboxLayout.addWidget(self.DataBitCbox, 2, 1, 1, 1)
        self.CheckBitCbox = QtWidgets.QComboBox()
        self.CheckBitCbox.setObjectName("CheckBitCbox")
        self.ConfigureGboxLayout.addWidget(self.CheckBitCbox, 3, 1, 1, 1)
        self.PortLab = QtWidgets.QLabel()
        self.PortLab.setObjectName("PortLab")
        self.ConfigureGboxLayout.addWidget(self.PortLab, 0, 0, 1, 1)
        self.StopBitLab = QtWidgets.QLabel()
        self.StopBitLab.setObjectName("StopBitLab")
        self.ConfigureGboxLayout.addWidget(self.StopBitLab, 4, 0, 1, 1)
        self.CheckBitLab = QtWidgets.QLabel()
        self.CheckBitLab.setObjectName("CheckBitLab")
        self.ConfigureGboxLayout.addWidget(self.CheckBitLab, 3, 0, 1, 1)
        self.PortCbox = QtWidgets.QComboBox()
        self.PortCbox.setObjectName("PortCbox")
        self.ConfigureGboxLayout.addWidget(self.PortCbox, 0, 1, 1, 1)
        self.PortSwitchPbtn = QtWidgets.QPushButton()
        self.PortSwitchPbtn.setObjectName("PortSwitchPbtn")
        self.ConfigureGboxLayout.addWidget(self.PortSwitchPbtn, 5, 0, 1, 2)
        self.BaudCbox = QtWidgets.QComboBox()
        self.BaudCbox.setObjectName("BaudCbox")
        self.ConfigureGboxLayout.addWidget(self.BaudCbox, 1, 1, 1, 1)
        self.StopBitCbox = QtWidgets.QComboBox()
        self.StopBitCbox.setObjectName("StopBitCbox")
        self.ConfigureGboxLayout.addWidget(self.StopBitCbox, 4, 1, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.ConfigureGboxLayout.addItem(spacerItem, 6, 0, 1, 2)

        self.retranslateUi(SerialTool)
        self.SetSignalFunction()
        QtCore.QMetaObject.connectSlotsByName(SerialTool)

    def retranslateUi(self, SerialTool):
        """
        文本初始化
        :param SerialTool:
        :return:
        """
        _translate = QtCore.QCoreApplication.translate
        SerialTool.setWindowTitle(_translate("SerialTool", "Form"))
        self.setTitle(_translate("SerialTool", "串口配置"))
        self.BaudLab.setText(_translate("SerialTool", "波特率："))
        self.DatabitLab.setText(_translate("SerialTool", "数据位："))
        self.PortLab.setText(_translate("SerialTool", "端口："))
        self.StopBitLab.setText(_translate("SerialTool", "停止位："))
        self.CheckBitLab.setText(_translate("SerialTool", "校验位："))
        self.PortSwitchPbtn.setText(_translate("SerialTool", "打开串口"))

        self.BaudCbox.addItems(BaudList)
        self.BaudCbox.setCurrentIndex(4)
        self.DataBitCbox.addItems(DataBitList)
        self.DataBitCbox.setCurrentIndex(3)
        self.CheckBitCbox.addItems(CheckBitStrList)
        self.StopBitCbox.addItems(StopBitList)
        self.ReadConfigure()

    def SetSignalFunction(self):
        """
        设置信号槽
        :return:
        """
        self.PortSwitchPbtn.clicked.connect(self.SwitchPort)
        self.RefreshPortTimer.timeout.connect(self.RefreshPort)
        self.ReceiveTimer.timeout.connect(self.ReceiveData)

    def WriteConfigure(self):
        with open(SerialToolConfigureFileName, mode='w') as Fp:
            Fp.write('[SerialToolConfigure]\n')
            Fp.write('[baud]=%d\n' % self.BaudCbox.currentIndex())
            Fp.write('[datasize]=%d\n' % self.DataBitCbox.currentIndex())
            Fp.write('[checkbit]=%d\n' % self.CheckBitCbox.currentIndex())
            Fp.write('[stopbit]=%d\n' % self.StopBitCbox.currentIndex())

    def ReadConfigure(self):
        if os.path.exists(SerialToolConfigureFileName):
            with open(SerialToolConfigureFileName, mode='r') as Fp:
                DataList = Fp.readlines()
            self.BaudCbox.setCurrentIndex(int(DataList[1][7:]))
            self.DataBitCbox.setCurrentIndex(int(DataList[2][11:]))
            self.CheckBitCbox.setCurrentIndex(int(DataList[3][11:]))
            self.StopBitCbox.setCurrentIndex(int(DataList[4][10:]))

    def RefreshPort(self):
        """
        刷新串口
        :return:
        """
        if not self.SwitchPortFlag:
            TempPortList = list(serial.tools.list_ports.comports())
            TempPortNameList = []
            for TempPort in TempPortList:
                TempPortNameList.append(re.search('\(([^)]+)', str(TempPort)).group(1))
            if not self.PortList == TempPortNameList:
                self.PortList = TempPortNameList
                self.PortCbox.clear()
                self.PortCbox.addItems(self.PortList)
        else:
            TempPortList = list(serial.tools.list_ports.comports())
            TempPortNameList = []
            for TempPort in TempPortList:
                TempPortNameList.append(re.search('\(([^)]+)', str(TempPort)).group(1))
            if not TempPortNameList.count(self.PortCbox.currentText()):
                self.SwitchPort()

    def SwitchPort(self):
        """
        开关串口
        :return:
        """
        com = self.PortCbox.currentText()
        baud = int(self.BaudCbox.currentText())
        bytesize = int(self.DataBitCbox.currentText())
        check = self.CheckBitCbox.currentIndex()
        check = CheckBitList[check]
        stop = float(self.StopBitCbox.currentText())
        if not self.SwitchPortFlag:
            if len(com) > 0:
                try:
                    self.Ser = serial.Serial(port=com, baudrate=baud, bytesize=bytesize, stopbits=stop, parity=check,
                                             timeout=0.025)
                except:
                    self.LogSignal.emit(MessageClass(self.Name, '%s打开失败' % com))
                if self.Ser.is_open:
                    self.LogSignal.emit(MessageClass(self.Name, '%s打开成功' % com))
                    self.SwitchPortFlag = True
                    self.PortSwitchPbtn.setText('关闭串口')
                    self.PortCbox.setEnabled(False)
                    self.BaudCbox.setEnabled(False)
                    self.DataBitCbox.setEnabled(False)
                    self.CheckBitCbox.setEnabled(False)
                    self.StopBitCbox.setEnabled(False)
                    self.WriteConfigure()
                    self.Ser.flushInput()
                    self.Ser.flushOutput()
                    self.ReceiveTimer.start(1)
                else:
                    self.LogSignal.emit(MessageClass(self.Name, '%s打开失败' % com))
            else:
                self.LogSignal.emit(MessageClass(self.Name, '请选择串口'))
        else:
            self.SwitchPortFlag = False
            self.PortSwitchPbtn.setText('打开串口')
            self.PortCbox.setEnabled(True)
            self.BaudCbox.setEnabled(True)
            self.DataBitCbox.setEnabled(True)
            self.CheckBitCbox.setEnabled(True)
            self.StopBitCbox.setEnabled(True)
            self.Ser.close()
            self.ReceiveTimer.stop()
            self.LogSignal.emit(MessageClass(self.Name, '%s已关闭' % com))

    def ReceiveData(self):
        try:
            count = self.Ser.in_waiting
            if count > 0:
                dat = self.Ser.read(count)
                self.readyRead.emit(dat)
        except:
            self.SwitchPort()

    def OutputData(self, dat: bytes):
        """
        输出数据
        :param dat:
        :return:
        """
        self.Ser.write(dat)


if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    ui = UiSerialTool()
    ui.show()
    sys.exit(app.exec_())
