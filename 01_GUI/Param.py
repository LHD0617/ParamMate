#!/usr/bin/env python
# -*- encoding: utf-8 -*-
"""
@File    :   Param.py    
@Contact :   15663678208
@Modify Time      @Author    @Version    @Desciption
------------      -------    --------    -----------
2022/8/8 8:57   LHD      1.0         None
"""

# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ParamUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import struct
import sys

from PyQt5 import QtWidgets
from PyQt5.QtCore import Qt, pyqtSignal
from PyQt5.QtWidgets import QWidget, QGroupBox
from MessageClass import MessageClass

# 数据类型列表
DataTypeStrList = ('uint8', 'uint16', 'uint32', 'int8', 'int16', 'int32', 'float')
ModeTypeStrList = ('R_Type', 'W_Type', 'RW_Type')

MAXVALUE = 2147483647


class ParamSubClass(QWidget):
    Index: int
    DataType: int
    SendDataSignal = pyqtSignal(bytes)

    def __init__(self, Name='', DataType=0, ModeType=0, Index=0):
        super(ParamSubClass, self).__init__()
        self.Index = Index
        self.DataType = DataType
        self.NameLab = QtWidgets.QLabel()
        self.NameLab.setAlignment(Qt.AlignRight)
        self.NameLab.setAlignment(Qt.AlignCenter)
        self.NameLab.setText(Name + '：')
        if DataType == 6:  # 浮点数类型
            self.DataSBox = QtWidgets.QDoubleSpinBox()
            self.DataSBox.setSingleStep(0.0000001)
            self.DataSBox.setDecimals(7)
        else:
            self.DataSBox = QtWidgets.QSpinBox()
            if DataType < 3:
                self.DataSBox.setRange(0, MAXVALUE)
            else:
                self.DataSBox.setRange(-MAXVALUE - 1, MAXVALUE)
        if ModeType == 0:
            self.DataSBox.setReadOnly(True)
        else:
            self.DataSBox.setReadOnly(False)
        self.DataSBox.valueChanged.connect(self.OutputData)
        self.setupUi()

    def setupUi(self):
        Layout = QtWidgets.QHBoxLayout()
        Layout.addWidget(self.NameLab)
        Layout.addWidget(self.DataSBox)
        self.setLayout(Layout)

    def OutputData(self, Data):
        dat = self.Index.to_bytes(1, 'little', signed=False)
        if type(Data) == int:
            dat += Data.to_bytes(4, 'little', signed=True)
        if type(Data) == float:
            dat += struct.pack('f', Data)
        self.SendDataSignal.emit(dat)


class MyParam(QGroupBox):
    Name: str
    ID: int
    ParamSubList: list
    DataLen: int
    LogSignal = pyqtSignal(MessageClass)
    SendDataSignal = pyqtSignal(int, int, bytes)

    def __init__(self, ID=0, Name=''):
        super(MyParam, self).__init__()
        self.Name = Name
        self.ID = ID
        self.ParamSubList = []
        self.DataLen = 0
        self.setupUi()
        self.setTitle(Name)

    def setupUi(self):
        self.setObjectName("Param")
        self.resize(600, 400)
        self.setObjectName("ParamGbox")
        self.SubLayout = QtWidgets.QGridLayout(self)
        self.SubLayout.setObjectName("SubLayout")

    def AddChannels(self, Name='', DataType=0, ModeType=0):
        ParamSubNum = len(self.ParamSubList)
        ParamSub = ParamSubClass(Name=Name, DataType=DataType, ModeType=ModeType, Index=ParamSubNum)
        ParamSub.SendDataSignal.connect(self.OutputData)
        row = ParamSubNum >> 0x03  # 获取控件所在行
        col = ParamSubNum & 0x07  # 获取控件所在列
        self.SubLayout.addWidget(ParamSub, row, col, 1, 1)
        self.ParamSubList.append(ParamSub)
        if DataType == 6:
            self.DataLen += 4
        else:
            self.DataLen += 0x01 << (DataType % 3)

    def InputData(self, Data: bytes):
        if len(Data) == self.DataLen:
            DataIndex = 0
            for i in range(len(self.ParamSubList)):
                if self.ParamSubList[i].DataType == 6:
                    DataLen = 4
                else:
                    DataLen = 0x01 << (self.ParamSubList[i].DataType % 3)
                ChannelData = Data[DataIndex: DataIndex + DataLen]
                DataIndex += DataLen
                if self.ParamSubList[i].DataType < 3:  # 无符号整数
                    ChannelData = int.from_bytes(ChannelData, 'little', signed=False)
                elif self.ParamSubList[i].DataType < 6:  # 有符号整数
                    ChannelData = int.from_bytes(ChannelData, 'little', signed=True)
                else:  # 浮点数
                    ChannelData = struct.unpack('f', ChannelData)[0]
                self.ParamSubList[i].DataSBox.setValue(ChannelData)
        else:
            self.LogSignal.emit(MessageClass(self.Name, '数据接收错误'))

    def OutputData(self, dat: bytes):
        self.SendDataSignal.emit(0x40, self.ID, dat)


if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    ui = MyParam(Name='test')
    ui.show()
    sys.exit(app.exec_())
